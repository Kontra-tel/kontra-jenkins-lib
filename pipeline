// This Pipeline lives in the *library repo* itself.
// It bootstraps/loads this same repo as a Shared Library and invokes vars/* steps.

pipeline {
  agent any

  tools {
    jdk    'temurin-21'
    gradle 'Gradle 9.1.0-rc-2' // used only if wrapper is missing
  }

  options {
    timestamps()
    disableConcurrentBuilds()
  }

  parameters {
    // Semver controls
    booleanParam(name: 'FORCE_MAJOR',          defaultValue: false, description: 'Force major version bump (!major)')
    booleanParam(name: 'FORCE_MINOR',          defaultValue: false, description: 'Force minor version bump (!minor)')
    booleanParam(name: 'FORCE_PATCH',          defaultValue: false, description: 'Force patch version bump (default)')
    booleanParam(name: 'FORCE_RELEASE',        defaultValue: false, description: 'Force tagging this build as a release (!release)')
    booleanParam(name: 'ALWAYS_TAG',           defaultValue: false, description: 'Create a git tag for every bump')
    booleanParam(name: 'STRICT_TAG_BASELINE',  defaultValue: false, description: 'Ignore version.txt; baseline only from tags')
    booleanParam(name: 'ONLY_TAG_ON_MAIN',     defaultValue: true,  description: 'Only tag on the main branch')
    string      (name: 'RELEASE_BRANCH',       defaultValue: 'main', description: 'Branch where tagging is allowed when ONLY_TAG_ON_MAIN=true')
    booleanParam(name: 'CUMULATIVE_PATCH',     defaultValue: false, description: 'Patch += commits since last tag (when baseline is a tag)')

    // GitHub integration
    booleanParam(name: 'CREATE_GH_RELEASE',    defaultValue: false, description: 'Create/Update a GitHub Release for tagged versions')
    booleanParam(name: 'GH_RELEASE_DRAFT',     defaultValue: false, description: 'Create releases as drafts')
    booleanParam(name: 'GH_RELEASE_PRERELEASE',defaultValue: false, description: 'Mark releases as prerelease')
    booleanParam(name: 'GH_GENERATE_NOTES',    defaultValue: true,  description: 'Auto-generate release notes')
    string      (name: 'GH_OWNER',             defaultValue: 'Kontra-tel', description: 'GitHub org/user (helps GitHub App token inference)')
    string      (name: 'GH_CREDENTIALS_ID',    defaultValue: 'Jenkins-Kontra', description: 'CredentialsId (GitHub App or PAT) for pushing tags/releases')
  }

  environment {
    VERSION_FILE   = 'version.txt'
    CHANGELOG_FILE = 'CHANGELOG.md'
    GIT_READ_CREDS = 'Jenkins-Kontra'
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Load this repo as a library') {
      steps {
        script {
          def repoUrl = sh(script: 'git config --get remote.origin.url', returnStdout: true).trim()
          def branch  = sh(script: 'git rev-parse --abbrev-ref HEAD',   returnStdout: true).trim()

          // Optional: assert the branch exists remotely (helps catch typos like main vs master)
          // sh "git ls-remote --heads ${repoUrl} ${branch} && true"

          def scmCfg = [
            $class: 'GitSCM',
            branches: [[name: "*/${branch}"]],
            doGenerateSubmoduleConfigurations: false,
            extensions: [],
            userRemoteConfigs: [[url: repoUrl]]
          ]
          if (env.GIT_READ_CREDS?.trim()) {
            scmCfg.userRemoteConfigs[0].credentialsId = env.GIT_READ_CREDS.trim()
          }

          library(identifier: "kontra-jenkins-lib@${branch}", retriever: legacySCM(scmCfg))
        }
      }
    }

    stage('Versioning (vars/semver.groovy)') {
      steps {
        script {
          def v = semver(
            strategy           : 'tag',                 // or 'file'
            versionFile        : env.VERSION_FILE,
            cumulativePatch    : params.CUMULATIVE_PATCH,
            // bump tokens/forces
            forceMajor         : params.FORCE_MAJOR,
            forceMinor         : params.FORCE_MINOR,
            forcePatch         : params.FORCE_PATCH,
            forceRelease       : params.FORCE_RELEASE,
            // tagging behavior
            alwaysTag          : params.ALWAYS_TAG,
            strictTagBaseline  : params.STRICT_TAG_BASELINE,
            tagOnRelease       : true,
            onlyTagOnMain      : params.ONLY_TAG_ON_MAIN,
            releaseBranch      : params.RELEASE_BRANCH,
            pushTags           : true,
            // GitHub integration
            credentialsId      : params.GH_CREDENTIALS_ID?.trim(),
            owner              : params.GH_OWNER?.trim(),
            createGithubRelease: params.CREATE_GH_RELEASE,
            releaseDraft       : params.GH_RELEASE_DRAFT,
            prerelease         : params.GH_RELEASE_PRERELEASE,
            generateReleaseNotes: params.GH_GENERATE_NOTES
          )

          currentBuild.displayName = "v${v.version}"
          echo "semver → version=${v.version} (base=${v.baseVersion}, src=${v.baselineSource}) bump=${v.bump} release=${v.isRelease} tagPushed=${v.tagPushed} ghReleased=${v.githubReleased}"

          writeFile file: env.VERSION_FILE, text: v.version + "\n"
          archiveArtifacts artifacts: env.VERSION_FILE, fingerprint: true

          sh "git log -1 --oneline || true"
          sh "git tag -l | tail -n 5 || true"
        }
      }
    }

    stage('Changelog (vars/generateChangelog.groovy)') {
      steps {
        script {
          def out = generateChangelog(
            outputFile: env.CHANGELOG_FILE,
            version   : env.BUILD_VERSION
          )
          echo "Changelog updated → ${out ?: 'no changes'}"
          archiveArtifacts artifacts: env.CHANGELOG_FILE, fingerprint: true
        }
      }
    }

    stage('Unit tests (JenkinsPipelineUnit)') {
      steps {
        script {
          writeFile file: 'init.gradle', text: '''
allprojects {
  repositories {
    maven { url "https://repo.jenkins-ci.org/releases/" }
    mavenCentral()
  }
}
'''
          sh '''
            set -eu
            if [ -x ./gradlew ]; then
              echo "Using Gradle wrapper"
              ./gradlew --no-daemon --stacktrace --info -I init.gradle clean test
            else
              echo "Wrapper missing → system Gradle"
              gradle --no-daemon --stacktrace --info -I init.gradle clean test
            fi
          '''
        }
      }
      post {
        always {
          junit allowEmptyResults: true, testResults: 'build/test-results/test/*.xml'
          archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/tests/test/**'
        }
      }
    }

    stage('Smoke vars (optional)') {
      when { expression { fileExists('vars/writeEnvFile.groovy') && fileExists('vars/deploySystemd.groovy') } }
      steps {
        script {
          writeEnvFile(dryRun:true, path: "${pwd()}/.env", keys:['FOO','BAR'], data:[FOO:'1', BAR:'2'])
          deploySystemd(
            dryRun:true,
            service:'kontraLib-smoke',
            workingDir: "${pwd()}",
            installUnit:true, overwriteUnit:true, useSudo:false,
            execStart:"/usr/bin/env bash -lc 'echo hello from kontraLib'"
          )
        }
      }
    }
  }

  post {
    always { echo 'Pipeline completed.' }
  }
}
// End of Jenkinsfile
