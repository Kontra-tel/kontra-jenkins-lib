// This Pipeline lives in the *library repo* itself.
// It bootstraps/load this same repo as a Shared Library and invokes vars/* steps.

pipeline {
  agent any

  tools {
    jdk    'temurin-21'
    gradle 'Gradle 9.1.0-rc-2' // used only if wrapper is missing
  }

  options {
    timestamps()
    // ansiColor('xterm') not an existing option
    disableConcurrentBuilds()
  }

  parameters {
    booleanParam(name: 'FORCE_MAJOR',   defaultValue: false, description: 'Force major version bump (!major)')
    booleanParam(name: 'FORCE_MINOR',   defaultValue: false, description: 'Force minor version bump (!minor)')
    booleanParam(name: 'FORCE_PATCH',   defaultValue: false, description: 'Force patch version bump (default)')
    booleanParam(name: 'FORCE_RELEASE', defaultValue: false, description: 'Force tagging this build as a release (!release)')
  }

  environment {
    // optional: where to place generated files for this library repo
    CHANGELOG_FILE = 'CHANGELOG.md'
    VERSION_FILE   = 'version.txt'
    // if your repo requires creds to fetch again for library loading, set the ID here:
    GIT_READ_CREDS = 'Jenkins-Kontra'   // <-- change or remove if anonymous works
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Load this repo as a library') {
      steps {
        script {
            // Resolve repo url/branch for the retriever
            def repoUrl = sh(script: 'git config --get remote.origin.url', returnStdout: true).trim()
            def branch  = sh(script: 'git rev-parse --abbrev-ref HEAD',   returnStdout: true).trim()

            // Load the *current commit* as a Shared Library so we can call vars/* right here.
            // Generic Git SCM Source (must provide 'remote')
            def src = [
            $class: 'jenkins.plugins.git.GitSCMSource',
            remote: 'https://github.com/Kontra-tel/kontra-jenkins-lib.git',
            credentialsId: 'Jenkins-Kontra',   // omit if public
            traits: []
            ]
            library(identifier: 'kontra-jenkins-lib@main', retriever: modernSCM(src))
        }
      }
    }

    stage('Versioning (vars/semver.groovy)') {
      steps {
        script {
          // Use library step directly (now available in the Pipeline script):
          def v = semver(
            strategy     : 'tag',
            versionFile  : env.VERSION_FILE,
            tagOnRelease : true,    // will tag ONLY if commit has !release or forceRelease true
            pushTags     : true,
            forceMajor   : params.FORCE_MAJOR,
            forceMinor   : params.FORCE_MINOR,
            forcePatch   : params.FORCE_PATCH,
            forceRelease : params.FORCE_RELEASE,
            onlyTagOnMain: true
          )
          currentBuild.displayName = "v${v.version}"
          echo "semver: bump=${v.bump}, version=${v.version}, isRelease=${v.isRelease}, forcedBump=${v.forcedBump ?: 'none'}, forcedRelease=${v.forcedRelease}" 
          sh "git log -1 --oneline || true"
          sh "git tag -l | tail -n 5 || true"
          writeFile file: env.VERSION_FILE, text: v.version + "\n"
          archiveArtifacts artifacts: env.VERSION_FILE, fingerprint: true
        }
      }
    }

    stage('Changelog (vars/generateChangelog.groovy)') {
      when { expression { currentBuild.changeSets?.size() > 0 } }
      steps {
        script {
          def out = generateChangelog(
            outputFile: env.CHANGELOG_FILE,
            version: env.BUILD_VERSION  // set by semver
          )
          echo "Changelog updated â†’ ${out ?: 'no changes'}"
          archiveArtifacts artifacts: env.CHANGELOG_FILE, fingerprint: true
        }
      }
    }

    stage('Unit tests (JenkinsPipelineUnit)') {
      steps {
        script {
          // Ensure Jenkins repo is available, even if build.gradle forgets it
          writeFile file: 'init.gradle', text: '''
allprojects {
  repositories {
    maven { url "https://repo.jenkins-ci.org/releases/" }
    mavenCentral()
  }
}
'''
          sh '''
            set -eu
            echo "Running tests with system Gradle (wrapper ignored)"
            gradle --version
            gradle --no-daemon --stacktrace --info -I init.gradle clean test
          '''
        }
      }
      post {
        always {
          junit allowEmptyResults: true, testResults: 'build/test-results/test/*.xml'
          archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/tests/test/**'
        }
      }
    }

    // Optional: smoke-call other vars in dry-run for extra confidence
    stage('Smoke vars (optional)') {
      when { expression { fileExists('vars/writeEnvFile.groovy') && fileExists('vars/deploySystemd.groovy') } }
      steps {
        script {
          writeEnvFile(dryRun:true, path: "${pwd()}/.env", keys:['FOO','BAR'], data:[FOO:'1', BAR:'2'])
          deploySystemd(
            dryRun:true,
            service:'kontraLib-smoke',
            workingDir: "${pwd()}",
            installUnit:true, overwriteUnit:true, useSudo:false,
            execStart:"/usr/bin/env bash -lc 'echo hello from kontraLib'"
          )
        }
      }
    }
  }

  post {
    always { echo 'Pipeline completed.' }
  }
}
// End of Jenkinsfile